OMAPI interfaces to all object creation, destruction, and modification

diff --git a/server/omapi.c b/server/omapi.c
index bbddaf9..b54c63b 100644
--- a/server/omapi.c
+++ b/server/omapi.c
@@ -248,6 +248,8 @@ isc_result_t dhcp_lease_set_value  (omapi_object_t *h,
 	    return DHCP_R_UNCHANGED;	/* XXX take change. */
 	} else if (!omapi_ds_strcmp (name, "hostname")) {
 	    return DHCP_R_UNCHANGED;	/* XXX take change. */
+	} else if (!omapi_ds_strcmp (name, "ifname")) {
+	    return ISC_R_UNCHANGED;     /* XXX take change. */
 	} else if (!omapi_ds_strcmp (name, "client-hostname")) {
 	    return DHCP_R_UNCHANGED;	/* XXX take change. */
 	} else if (!omapi_ds_strcmp (name, "host")) {
@@ -349,6 +351,10 @@ isc_result_t dhcp_lease_get_value (omapi_object_t *h, omapi_object_t *id,
 		return omapi_make_const_value (value, name,
 					       lease -> uid,
 					       lease -> uid_len, MDL);
+	} else if (!omapi_ds_strcmp (name, "ifname")) {
+		return omapi_make_const_value (value, name,
+					       lease -> ifname.name,
+					       lease -> ifname.len, MDL);
 	} else if (!omapi_ds_strcmp (name, "client-hostname")) {
 		if (lease -> client_hostname)
 			return omapi_make_string_value
@@ -436,6 +442,8 @@ isc_result_t dhcp_lease_destroy (omapi_object_t *h, const char *file, int line)
 		lease -> uid_len = 0;
 	}
 
+	set_ifname (&lease -> ifname, (unsigned char*)0, 0);
+
 	if (lease -> client_hostname) {
 		dfree (lease -> client_hostname, MDL);
 		lease -> client_hostname = (char *)0;
@@ -466,6 +474,8 @@ isc_result_t dhcp_lease_destroy (omapi_object_t *h, const char *file, int line)
 	   XXX pointer except on exit... */
 	if (lease -> next)
 		lease_dereference (&lease -> next, file, line);
+	if (lease -> n_ifname)
+		lease_dereference (&lease -> n_ifname, file, line);
 	if (lease -> n_hw)
 		lease_dereference (&lease -> n_hw, file, line);
 	if (lease -> n_uid)
@@ -552,6 +562,19 @@ isc_result_t dhcp_lease_stuff_values (omapi_object_t *c,
 		}
 	}
 
+	if (lease -> ifname.len) {
+		status = omapi_connection_put_name (c, "ifname");
+		if (status != ISC_R_SUCCESS)
+			return status;
+		status = omapi_connection_put_uint32 (c, lease -> ifname.len);
+		if (status != ISC_R_SUCCESS)
+			return status;
+		status = omapi_connection_copyin (c, lease -> ifname.name,
+						  lease -> ifname.len);
+		if (status != ISC_R_SUCCESS)
+			return status;
+	}
+
 	if (lease -> client_hostname) {
 		status = omapi_connection_put_name (c, "client-hostname");
 		if (status != ISC_R_SUCCESS)
@@ -787,6 +810,36 @@ isc_result_t dhcp_lease_lookup (omapi_object_t **lp,
 		}
 	}
 
+	/* Now look for an ifname. */
+	status = omapi_get_value_str (ref, id, "ifname", &tv);
+	if (status == ISC_R_SUCCESS) {
+		lease = (struct lease *)0;
+		lease_id_hash_lookup(&lease, lease_ifname_hash,
+				     tv->value->u.buffer.value,
+				     tv->value->u.buffer.len, MDL);
+		omapi_value_dereference (&tv, MDL);
+
+		if (*lp && *lp != (omapi_object_t *)lease) {
+			omapi_object_dereference (lp, MDL);
+			lease_dereference (&lease, MDL);
+			return ISC_R_KEYCONFLICT;
+		} else if (!lease) {
+			if (*lp)
+			    omapi_object_dereference (lp, MDL);
+			return ISC_R_NOTFOUND;
+		} else if (lease -> n_uid) {
+			if (*lp)
+			    omapi_object_dereference (lp, MDL);
+			return ISC_R_MULTIPLE;
+		} else if (!*lp) {
+			/* XXX fix so that hash lookup itself creates
+			   XXX the reference. */
+			omapi_object_reference (lp,
+						(omapi_object_t *)lease, MDL);
+			lease_dereference (&lease, MDL);
+		}
+	}
+
 	/* Now look for a client identifier. */
 	status = omapi_get_value_str (ref, id, "dhcp-client-identifier", &tv);
 	if (status == ISC_R_SUCCESS) {
@@ -1001,6 +1054,21 @@ isc_result_t dhcp_host_set_value  (omapi_object_t *h,
 		return ISC_R_SUCCESS;
 	}
 
+	if (!omapi_ds_strcmp (name, "ifname")) {
+		if (host -> ifname.len)
+			return ISC_R_EXISTS;
+		if (value && (value -> type == omapi_datatype_data ||
+			      value -> type == omapi_datatype_string)) {
+			if (!set_ifname (&host -> ifname,
+					 value -> u.buffer.value,
+					 value -> u.buffer.len)) {
+				return ISC_R_NOMEMORY;
+			}
+		} else
+			return ISC_R_INVALIDARG;
+		return ISC_R_SUCCESS;
+	}
+
 	if (!omapi_ds_strcmp (name, "dhcp-client-identifier")) {
 		if (host -> client_identifier.data)
 			return ISC_R_EXISTS;
@@ -1135,6 +1203,15 @@ isc_result_t dhcp_host_get_value (omapi_object_t *h, omapi_object_t *id,
 	    return ISC_R_NOTFOUND;
 	}
 
+	if (!omapi_ds_strcmp (name, "ifname")) {
+		if (!host -> ifname.len)
+			return ISC_R_NOTFOUND;
+		return (omapi_make_const_value
+			(value, name,
+			 host -> ifname.name,
+			 (unsigned long)(host -> ifname.len), MDL));
+	}
+
 	if (!omapi_ds_strcmp (name, "dhcp-client-identifier")) {
 		if (!host -> client_identifier.len)
 			return ISC_R_NOTFOUND;
@@ -1144,6 +1221,13 @@ isc_result_t dhcp_host_get_value (omapi_object_t *h, omapi_object_t *id,
 					       MDL);
 	}
 
+	if (!omapi_ds_strcmp (name, "ifname")) {
+		if (!host -> ifname.len)
+			return ISC_R_NOTFOUND;
+		return omapi_make_const_value (value, name, host -> ifname.name,
+					       host -> ifname.len, MDL);
+	}
+
 	if (!omapi_ds_strcmp (name, "name"))
 		return omapi_make_string_value (value, name, host -> name,
 						MDL);
@@ -1191,6 +1275,7 @@ isc_result_t dhcp_host_destroy (omapi_object_t *h, const char *file, int line)
 		dfree (host -> name, file, line);
 		host -> name = (char *)0;
 	}
+	set_ifname (&host -> ifname, (unsigned char*)0, 0);
 	data_string_forget (&host -> client_identifier, file, line);
 	if (host -> fixed_addr)
 		option_cache_dereference (&host -> fixed_addr, file, line);
@@ -1218,8 +1303,9 @@ isc_result_t dhcp_host_signal_handler (omapi_object_t *h,
 
 	if (!strcmp (name, "updated")) {
 		/* There must be a client identifier of some sort. */
-		if (host -> interface.hlen == 0 &&
-		    !host -> client_identifier.len)
+		if ((host -> interface.hlen == 0) &&
+		    (host -> client_identifier.len == 0) &&
+		    (host -> ifname.len == 0))
 			return DHCP_R_INVALIDARG;
 
 		if (!host -> name) {
@@ -1305,6 +1391,22 @@ isc_result_t dhcp_host_stuff_values (omapi_object_t *c,
 			return status;
 	}
 
+	if (host -> ifname.len) {
+		status = omapi_connection_put_name (c, "ifname");
+		if (status != ISC_R_SUCCESS)
+			return status;
+		status = (omapi_connection_put_uint32
+			  (c, host -> ifname.len));
+		if (status != ISC_R_SUCCESS)
+			return status;
+		status = (omapi_connection_copyin
+			  (c,
+			   host -> ifname.name,
+			   (unsigned long)(host -> ifname.len)));
+		if (status != ISC_R_SUCCESS)
+			return status;
+	}
+
 	if (host -> name) {
 		status = omapi_connection_put_name (c, "name");
 		if (status != ISC_R_SUCCESS)
@@ -1409,6 +1511,35 @@ isc_result_t dhcp_host_lookup (omapi_object_t **lp,
 		}
 	}
 
+	/* Now look for an ifname. */
+	status = omapi_get_value_str (ref, id, "ifname", &tv);
+	if (status == ISC_R_SUCCESS) {
+		host = (struct host_decl *)0;
+		host_hash_lookup (&host, host_ifname_hash,
+				  tv -> value -> u.buffer.value,
+				  tv -> value -> u.buffer.len, MDL);
+		omapi_value_dereference (&tv, MDL);
+
+		if (*lp && *lp != (omapi_object_t *)host) {
+			omapi_object_dereference (lp, MDL);
+			if (host)
+				host_dereference (&host, MDL);
+			return ISC_R_KEYCONFLICT;
+		} else if (!host || (host -> flags & HOST_DECL_DELETED)) {
+			if (*lp)
+			    omapi_object_dereference (lp, MDL);
+			if (host)
+				host_dereference (&host, MDL);
+			return ISC_R_NOTFOUND;
+		} else if (!*lp) {
+			/* XXX fix so that hash lookup itself creates
+			   XXX the reference. */
+			omapi_object_reference (lp,
+						(omapi_object_t *)host, MDL);
+			host_dereference (&host, MDL);
+		}
+	}
+
 	/* Now look for a hardware address. */
 	status = omapi_get_value_str (ref, id, "hardware-address", &tv);
 	if (status == ISC_R_SUCCESS) {
